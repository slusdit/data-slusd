// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// //
//  Authentication models 
// //

model User {
  id    String  @id @default(cuid())
  name  String?
  email String? @unique
  image String?

  school        SchoolInfo[]    @relation("UserSchool")
  emailVerified DateTime?
  queryEdit     Boolean         @default(false)
  admin         Boolean         @default(false)
  userRole      Role[]          @relation("UserRole")
  primaryRole   ROLE            @default(USER)
  Session       Session[]
  Account       Account?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserRole      UserRole[]
  UserSchool    UserSchool[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id])

  @@id([userId, credentialID])
}

model Role {
  id       String     @id @default(cuid())
  role     ROLE
  users    User[]     @relation("UserRole")
  UserRole UserRole[]
  Query    Query?     @relation(fields: [queryId], references: [id])
  queryId  String?

  QueryCategory QueryCategory[]
}

model SchoolInfo {
  id         String       @id @default(cuid())
  sc         String       @unique
  name       String
  users      User[]       @relation("UserSchool")
  UserSchool UserSchool[]
}

model UserSchool {
  userId   String
  schoolSc String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  school   SchoolInfo @relation(fields: [schoolSc], references: [id])

  @@id([userId, schoolSc])
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

// Backend and Query tables

model Query {
  id          String         @id @default(cuid())
  query       String         @db.Text()
  name        String
  label       String         @unique
  createdBy   String
  chart       Boolean        @default(false)
  description String
  publicQuery Boolean        @default(false)
  roles       Role[]         @relation
  categoryId  String?
  category    QueryCategory? @relation(fields: [categoryId], references: [id])
  hiddenCols  String          @default("")
}

model QueryCategory {
  id      String  @id @default(cuid())
  label   String  @unique
  value   String  @unique
  sort    Int     @default(0)
  queries Query[] @relation
  roles   Role[]  @relation
}

enum ROLE {
  USER
  ADMIN
  SUPERADMIN
  HR
  TEACHER
  SITEADMIN
  STAFF
}
