generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  image         String?
  admin         Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  queryEdit     Boolean         @default(false)
  primaryRole   ROLE            @default(USER)
  emailVerified DateTime?
  primarySchool Int?
  psl           Int?            @unique
  activeSchool  Int             @default(0)
  manualSchool  Int?  
  favorites     Query[]         @relation("id")       
  Account       Account?
  Authenticator Authenticator[]
  Session       Session[]
  UserClass     UserClass[]
  UserRole      UserRole[]
  UserSchool    UserSchool[]
  userRole      Role[]          @relation("UserRole")
  school        SchoolInfo[]    @relation("UserSchool")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  createdAt                DateTime @default(now())
  refresh_token_expires_in Int?
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id])

  @@id([userId, credentialID])
}

model Role {
  id            String          @id @default(cuid())
  role          ROLE
  queryId       String?
  Query         Query?          @relation(fields: [queryId], references: [id])
  UserRole      UserRole[]
  QueryCategory QueryCategory[] @relation("QueryCategoryToRole")
  users         User[]          @relation("UserRole")

  @@index([queryId], map: "Role_queryId_fkey")
}

model SchoolInfo {
  id         String       @id @default(cuid())
  sc         String       @unique
  name       String
  logo       String?
  UserSchool UserSchool[]
  users      User[]       @relation("UserSchool")
}

model UserSchool {
  userId   String
  schoolSc String
  school   SchoolInfo @relation(fields: [schoolSc], references: [id])
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, schoolSc])
  @@index([schoolSc], map: "UserSchool_schoolSc_fkey")
}

model UserRole {
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@index([roleId], map: "UserRole_roleId_fkey")
}

model UserClass {
  classId String
  userId  String
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id])

  @@id([userId, classId])
  @@index([classId], map: "UserClass_classId_fkey")
}

model Class {
  id             String      @id @default(cuid())
  sc             Int
  tn             Int
  psl            Int
  email          String?
  StaffID2       Int?
  StaffID3       Int?
  activeOverride Boolean     @default(false)
  UserClass      UserClass[]
}

model Query {
  id             String         @id @default(cuid())
  query          String         @db.Text
  name           String
  label          String         @unique
  createdBy      String
  description    String
  publicQuery    Boolean        @default(false)
  categoryId     String?
  hiddenCols     String         @default("")
  chart          Boolean        @default(false)
  chartXKey      String?
  chartYKey      String?
  chartTypeKey   String? 
  chartStackKey  Boolean        @default(false)
  widgetLinkOverride  String?
  chartSeriesOverride Json?      
  Chart          Chart[]
  category       QueryCategory? @relation(fields: [categoryId], references: [id])
  roles          Role[]

  @@index([categoryId], map: "Query_categoryId_fkey")
  User User[] @relation("id")
}

model QueryCategory {
  id      String  @id @default(cuid())
  label   String  @unique
  value   String  @unique
  sort    Int     @default(0)
  queries Query[]
  roles   Role[]  @relation("QueryCategoryToRole")
}

model Chart {
  id          String    @id @default(cuid())
  type        CHARTTYPE
  title       String
  chartConfig Json
  queryId     String
  query       Query     @relation(fields: [queryId], references: [id])

  @@index([queryId], map: "Chart_queryId_fkey")
}

enum ROLE {
  USER
  ADMIN
  SUPERADMIN
  HR
  TEACHER
  SITEADMIN
  STAFF
  BUSINESS
  IT
  DISCIPLINE
  
}

enum CHARTTYPE {
  BAR
  LINE
  AREA
  SCATTER
  BUBBLE
  PIE
  DONUT
}
